.TH "QwtScaleEngine" 3 "Tue Nov 20 2012" "Version 5.2.3" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtScaleEngine \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_scale_engine\&.h>\fP
.PP
Inherited by \fBQwtLinearScaleEngine\fP, and \fBQwtLog10ScaleEngine\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAttribute\fP { \fBNoAttribute\fP =  0, \fBIncludeReference\fP =  1, \fBSymmetric\fP =  2, \fBFloating\fP =  4, \fBInverted\fP =  8 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtScaleEngine\fP ()"
.br
.ti -1c
.RI "virtual \fB~QwtScaleEngine\fP ()"
.br
.ti -1c
.RI "int \fBattributes\fP () const "
.br
.ti -1c
.RI "virtual void \fBautoScale\fP (int maxNumSteps, double &x1, double &x2, double &stepSize) const =0"
.br
.ti -1c
.RI "virtual \fBQwtScaleDiv\fP \fBdivideScale\fP (double x1, double x2, int maxMajSteps, int maxMinSteps, double stepSize=0\&.0) const =0"
.br
.ti -1c
.RI "double \fBlowerMargin\fP () const "
.br
.ti -1c
.RI "double \fBreference\fP () const "
.br
.ti -1c
.RI "void \fBsetAttribute\fP (\fBAttribute\fP, bool on=true)"
.br
.ti -1c
.RI "void \fBsetAttributes\fP (int)"
.br
.ti -1c
.RI "void \fBsetMargins\fP (double lower, double upper)"
.br
.ti -1c
.RI "void \fBsetReference\fP (double \fBreference\fP)"
.br
.ti -1c
.RI "bool \fBtestAttribute\fP (\fBAttribute\fP) const "
.br
.ti -1c
.RI "virtual \fBQwtScaleTransformation\fP * \fBtransformation\fP () const =0"
.br
.ti -1c
.RI "double \fBupperMargin\fP () const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtDoubleInterval\fP \fBbuildInterval\fP (double v) const "
.br
.ti -1c
.RI "bool \fBcontains\fP (const \fBQwtDoubleInterval\fP &, double val) const "
.br
.ti -1c
.RI "double \fBdivideInterval\fP (double interval, int numSteps) const "
.br
.ti -1c
.RI "QwtValueList \fBstrip\fP (const QwtValueList &, const \fBQwtDoubleInterval\fP &) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class for scale engines\&. 

A scale engine trys to find 'reasonable' ranges and step sizes for scales\&.
.PP
The layout of the scale can be varied with \fBsetAttribute()\fP\&.
.PP
Qwt offers implementations for logarithmic (log10) and linear scales\&. Contributions for other types of scale engines (date/time, log2 \&.\&.\&. ) are welcome\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtScaleEngine::Attribute\fP"
.IP "\(bu" 2
IncludeReference
.br
 Build a scale which includes the \fBreference()\fP value\&.
.IP "\(bu" 2
Symmetric
.br
 Build a scale which is symmetric to the \fBreference()\fP value\&.
.IP "\(bu" 2
Floating
.br
 The endpoints of the scale are supposed to be equal the outmost included values plus the specified margins (see \fBsetMargins()\fP)\&. If this attribute is \fInot\fP set, the endpoints of the scale will be integer multiples of the step size\&.
.IP "\(bu" 2
Inverted
.br
 Turn the scale upside down\&.
.PP
.PP
\fBSee also:\fP
.RS 4
\fBsetAttribute()\fP, \fBtestAttribute()\fP, \fBreference()\fP, \fBlowerMargin()\fP, \fBupperMargin()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int QwtScaleEngine::attributes () const"
Return the scale attributes 
.PP
\fBSee also:\fP
.RS 4
\fBAttribute\fP, \fBsetAttributes()\fP, \fBtestAttribute()\fP 
.RE
.PP

.SS "virtual void QwtScaleEngine::autoScale (intmaxNumSteps, double &x1, double &x2, double &stepSize) const\fC [pure virtual]\fP"
Align and divide an interval
.PP
\fBParameters:\fP
.RS 4
\fImaxNumSteps\fP Max\&. number of steps 
.br
\fIx1\fP First limit of the interval (In/Out) 
.br
\fIx2\fP Second limit of the interval (In/Out) 
.br
\fIstepSize\fP Step size (Return value) 
.RE
.PP

.PP
Implemented in \fBQwtLog10ScaleEngine\fP, and \fBQwtLinearScaleEngine\fP\&.
.SS "\fBQwtDoubleInterval\fP QwtScaleEngine::buildInterval (doublev) const\fC [protected]\fP"

.PP
Build an interval for a value\&. In case of v == 0\&.0 the interval is [-0\&.5, 0\&.5], otherwide it is [0\&.5 * v, 1\&.5 * v] 
.SS "bool QwtScaleEngine::contains (const \fBQwtDoubleInterval\fP &interval, doublevalue) const\fC [protected]\fP"
Check if an interval 'contains' a value
.PP
\fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIvalue\fP Value
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleArithmetic::compareEps()\fP 
.RE
.PP

.SS "double QwtScaleEngine::divideInterval (doubleintervalSize, intnumSteps) const\fC [protected]\fP"
Calculate a step size for an interval size
.PP
\fBParameters:\fP
.RS 4
\fIintervalSize\fP Interval size 
.br
\fInumSteps\fP Number of steps
.RE
.PP
\fBReturns:\fP
.RS 4
Step size 
.RE
.PP

.SS "virtual \fBQwtScaleDiv\fP QwtScaleEngine::divideScale (doublex1, doublex2, intmaxMajSteps, intmaxMinSteps, doublestepSize = \fC0\&.0\fP) const\fC [pure virtual]\fP"

.PP
Calculate a scale division\&. \fBParameters:\fP
.RS 4
\fIx1\fP First interval limit 
.br
\fIx2\fP Second interval limit 
.br
\fImaxMajSteps\fP Maximum for the number of major steps 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size\&. If stepSize == 0\&.0, the scaleEngine calculates one\&. 
.RE
.PP

.PP
Implemented in \fBQwtLog10ScaleEngine\fP, and \fBQwtLinearScaleEngine\fP\&.
.SS "double QwtScaleEngine::lowerMargin () const"
\fBReturns:\fP
.RS 4
the margin at the lower end of the scale The default margin is 0\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetMargins()\fP 
.RE
.PP

.SS "double QwtScaleEngine::reference () const"
\fBReturns:\fP
.RS 4
the reference value 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetReference()\fP, \fBsetAttribute()\fP 
.RE
.PP

.SS "void QwtScaleEngine::setAttribute (\fBAttribute\fPattribute, boolon = \fCtrue\fP)"
Change a scale attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Attribute to change 
.br
\fIon\fP On/Off
.RE
.PP
\fBSee also:\fP
.RS 4
\fBAttribute\fP, \fBtestAttribute()\fP 
.RE
.PP

.SS "void QwtScaleEngine::setAttributes (intattributes)"
Change the scale attribute
.PP
\fBParameters:\fP
.RS 4
\fIattributes\fP Set scale attributes 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBAttribute\fP, \fBattributes()\fP 
.RE
.PP

.SS "void QwtScaleEngine::setMargins (doublelower, doubleupper)"

.PP
Specify margins at the scale's endpoints\&. \fBParameters:\fP
.RS 4
\fIlower\fP minimum distance between the scale's lower boundary and the smallest enclosed value 
.br
\fIupper\fP minimum distance between the scale's upper boundary and the greatest enclosed value
.RE
.PP
Margins can be used to leave a minimum amount of space between the enclosed intervals and the boundaries of the scale\&.
.PP
\fBWarning:\fP
.RS 4
.PD 0
.IP "\(bu" 2
\fBQwtLog10ScaleEngine\fP measures the margins in decades\&.
.PP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBupperMargin()\fP, \fBlowerMargin()\fP 
.RE
.PP

.SS "void QwtScaleEngine::setReference (doubler)"

.PP
Specify a reference point\&. \fBParameters:\fP
.RS 4
\fIr\fP new reference value
.RE
.PP
The reference point is needed if options IncludeReference or Symmetric are active\&. Its default value is 0\&.0\&.
.PP
\fBSee also:\fP
.RS 4
\fBAttribute\fP 
.RE
.PP

.SS "QwtValueList QwtScaleEngine::strip (const QwtValueList &ticks, const \fBQwtDoubleInterval\fP &interval) const\fC [protected]\fP"
Remove ticks from a list, that are not inside an interval
.PP
\fBParameters:\fP
.RS 4
\fIticks\fP Tick list 
.br
\fIinterval\fP Interval
.RE
.PP
\fBReturns:\fP
.RS 4
Stripped tick list 
.RE
.PP

.SS "bool QwtScaleEngine::testAttribute (\fBAttribute\fPattribute) const"
Check if a attribute is set\&.
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Attribute to be tested 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBAttribute\fP, \fBsetAttribute()\fP 
.RE
.PP

.SS "virtual \fBQwtScaleTransformation\fP* QwtScaleEngine::transformation () const\fC [pure virtual]\fP"
\fBReturns:\fP
.RS 4
a transformation 
.RE
.PP

.PP
Implemented in \fBQwtLog10ScaleEngine\fP, and \fBQwtLinearScaleEngine\fP\&.
.SS "double QwtScaleEngine::upperMargin () const"
\fBReturns:\fP
.RS 4
the margin at the upper end of the scale The default margin is 0\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetMargins()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
