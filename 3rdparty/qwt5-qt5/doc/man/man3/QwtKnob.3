.TH "QwtKnob" 3 "Tue Nov 20 2012" "Version 5.2.3" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtKnob \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_knob\&.h>\fP
.PP
Inherits \fBQwtAbstractSlider\fP, and \fBQwtAbstractScale\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSymbol\fP { \fBLine\fP, \fBDot\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtKnob\fP (QWidget *parent=NULL)"
.br
.ti -1c
.RI "virtual \fB~QwtKnob\fP ()"
.br
.ti -1c
.RI "int \fBborderWidth\fP () const "
.br
.ti -1c
.RI "int \fBknobWidth\fP () const "
.br
.ti -1c
.RI "virtual QSize \fBminimumSizeHint\fP () const "
.br
.ti -1c
.RI "const \fBQwtRoundScaleDraw\fP * \fBscaleDraw\fP () const "
.br
.ti -1c
.RI "\fBQwtRoundScaleDraw\fP * \fBscaleDraw\fP ()"
.br
.ti -1c
.RI "void \fBsetBorderWidth\fP (int bw)"
.br
.ti -1c
.RI "void \fBsetKnobWidth\fP (int w)"
.br
.ti -1c
.RI "void \fBsetScaleDraw\fP (\fBQwtRoundScaleDraw\fP *)"
.br
.ti -1c
.RI "void \fBsetSymbol\fP (\fBSymbol\fP)"
.br
.ti -1c
.RI "void \fBsetTotalAngle\fP (double angle)"
.br
.ti -1c
.RI "virtual QSize \fBsizeHint\fP () const "
.br
.ti -1c
.RI "\fBSymbol\fP \fBsymbol\fP () const "
.br
.ti -1c
.RI "double \fBtotalAngle\fP () const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdraw\fP (QPainter *p, const QRect &ur)"
.br
.ti -1c
.RI "void \fBdrawKnob\fP (QPainter *p, const QRect &r)"
.br
.ti -1c
.RI "void \fBdrawMarker\fP (QPainter *p, double arc, const QColor &c)"
.br
.ti -1c
.RI "virtual void \fBpaintEvent\fP (QPaintEvent *e)"
.br
.ti -1c
.RI "virtual void \fBresizeEvent\fP (QResizeEvent *e)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The Knob Widget\&. 

The \fBQwtKnob\fP widget imitates look and behaviour of a volume knob on a radio\&. It contains a scale around the knob which is set up automatically or can be configured manually (see \fBQwtAbstractScale\fP)\&. Automatic scrolling is enabled when the user presses a mouse button on the scale\&. For a description of signals, slots and other members, see \fBQwtAbstractSlider\fP\&.
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBQwtAbstractSlider\fP and \fBQwtAbstractScale\fP for the descriptions of the inherited members\&. 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtKnob::Symbol\fP"
Symbol 
.PP
\fBSee also:\fP
.RS 4
\fBQwtKnob::QwtKnob()\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtKnob::QwtKnob (QWidget *parent = \fCNULL\fP)\fC [explicit]\fP"
Constructor 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void QwtKnob::draw (QPainter *painter, const QRect &rect)\fC [protected]\fP"
Repaint the knob
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Update rectangle 
.RE
.PP

.SS "void QwtKnob::drawKnob (QPainter *painter, const QRect &r)\fC [protected]\fP"

.PP
Draw the knob\&. \fBParameters:\fP
.RS 4
\fIpainter\fP painter 
.br
\fIr\fP Bounding rectangle of the knob (without scale) 
.RE
.PP

.SS "void QwtKnob::drawMarker (QPainter *p, doublearc, const QColor &c)\fC [protected]\fP"

.PP
Draw the marker at the knob's front\&. \fBParameters:\fP
.RS 4
\fIp\fP Painter 
.br
\fIarc\fP Angle of the marker 
.br
\fIc\fP Marker color 
.RE
.PP

.SS "QSize QwtKnob::minimumSizeHint () const\fC [virtual]\fP"

.PP
Return a minimum size hint\&. \fBWarning:\fP
.RS 4
The return value of \fBQwtKnob::minimumSizeHint()\fP depends on the font and the scale\&. 
.RE
.PP

.SS "void QwtKnob::paintEvent (QPaintEvent *e)\fC [protected]\fP, \fC [virtual]\fP"
Repaint the knob
.PP
\fBParameters:\fP
.RS 4
\fIe\fP Paint event 
.RE
.PP

.SS "void QwtKnob::resizeEvent (QResizeEvent *e)\fC [protected]\fP, \fC [virtual]\fP"
Qt Resize Event 
.SS "const \fBQwtRoundScaleDraw\fP * QwtKnob::scaleDraw () const"
\fBReturns:\fP
.RS 4
the scale draw of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleDraw()\fP 
.RE
.PP

.SS "\fBQwtRoundScaleDraw\fP * QwtKnob::scaleDraw ()"
\fBReturns:\fP
.RS 4
the scale draw of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleDraw()\fP 
.RE
.PP

.SS "void QwtKnob::setBorderWidth (intbw)"

.PP
Set the knob's border width\&. \fBParameters:\fP
.RS 4
\fIbw\fP new border width 
.RE
.PP

.SS "void QwtKnob::setKnobWidth (intw)"

.PP
Change the knob's width\&. The specified width must be >= 5, or it will be clipped\&. 
.PP
\fBParameters:\fP
.RS 4
\fIw\fP New width 
.RE
.PP

.SS "void QwtKnob::setScaleDraw (\fBQwtRoundScaleDraw\fP *scaleDraw)"
Change the scale draw of the knob
.PP
For changing the labels of the scales, it is necessary to derive from \fBQwtRoundScaleDraw\fP and overload \fBQwtRoundScaleDraw::label()\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBscaleDraw()\fP 
.RE
.PP

.SS "void QwtKnob::setSymbol (\fBQwtKnob::Symbol\fPs)"

.PP
Set the symbol of the knob\&. \fBSee also:\fP
.RS 4
\fBsymbol()\fP 
.RE
.PP

.SS "void QwtKnob::setTotalAngle (doubleangle)"

.PP
Set the total angle by which the knob can be turned\&. \fBParameters:\fP
.RS 4
\fIangle\fP Angle in degrees\&.
.RE
.PP
The default angle is 270 degrees\&. It is possible to specify an angle of more than 360 degrees so that the knob can be turned several times around its axis\&. 
.SS "QSize QwtKnob::sizeHint () const\fC [virtual]\fP"
\fBReturns:\fP
.RS 4
\fBminimumSizeHint()\fP 
.RE
.PP

.SS "\fBQwtKnob::Symbol\fP QwtKnob::symbol () const"
\fBReturns:\fP
.RS 4
symbol of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetSymbol()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
